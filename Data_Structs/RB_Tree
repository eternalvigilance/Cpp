#include<iostream>
using std::cout;
using std::pair;
using std::make_pair;
enum Color
{
	Red,
	Black
};
template<class K,class V>
struct Node
{
	pair<K, V> _key;
	Node<K,V>* _left;
	Node<K,V>* _right;
	Node<K,V>* _parent;
	Color _color;
	Node(const pair<K,V>& kv)
		:_key(kv),_left(nullptr),_right(nullptr),_parent(nullptr),_color(Red)
	{}
};
template<class K,class V>
class RBTree
{
	typedef Node<K, V> Node;
	typedef pair<K, V> kv;
public:
	bool insert(const kv& key)
	{
		if (_root == nullptr)
		{
			_root = new Node(key);
			_root->_color = Black;
			return true;
		}

		Node* cur = _root;
		Node* parent = cur;
		while (cur)
		{
			if (key.first > cur->_key.first)
			{
				parent = cur;
				cur = cur->_right;
			}
			else if (key.first < cur->_key.first)
			{
					parent = cur;
					cur = cur->_left;
			}
			else
			{
				return false;
			}
		}
		cur = new Node(key);
		cur->_parent = parent;
		if (parent->_key.first > key.first)parent->_right = cur;
		else
			parent->_left = cur;
		if(parent->_color == Red)_update_color(cur);
		return true;
	}
private:
	Node* _root = nullptr;
	void _update_color(Node* cur)
	{

		while (cur->_parent && cur->_parent->_color == Red)
		{
			Node* g = cur->_parent->_parent;
			Node* p = cur->_parent;
			if (p == g->_left)
			{
				if (cur = p->_left)//Single Rotation
				{
					if (p->_right != nullptr)
					{
						if (p->_right->_color == Red)
						{
							p->_color = Black;
							p->_right->_color = Black;
							g->_color = Red;
							if (g == _root)
							{
								_root = p;
							}
						}
						else
							//in this case,the current node is not the inserted new node ,which original color is black
						{
							RotateR(g);
							g->_color = Red;
							p->_color = Black;
							if (g == _root)
							{
								_root = p;
							}
						}
					}
					else
					{
						RotateR(g);
						p->_color = Black;
						g->_color = Red;
						if (g == _root)
						{
							_root = p;
						}
					}
				}
				else if (cur = p->_right) // Double Rotation
				{
					if (p->_right != nullptr)
					{
						if (p->_right->_color == Red)
						{
							p->_color = Black;
							p->_right->_color = Black;
							g->_color = Red;
							if (g == _root)
							{
								_root = p;
							}
						}
						else
						{
							RoateLR(g);
							cur->_color = Black;
							g->_color = Red;
							if (g == _root)
							{
								_root = cur;
							}
						}
					}
					else
					{
						RotateLR(g);
						cur->_color = Black;
						g->_color = Red;
						if (g == _root)
						{
							_root = cur;
						}
					}
				}
			}
			else
			// The parent is the grandparent's right
			{
				if (cur == p->_right)//Single
				{
					if (g->_left != nullptr)
					{
						if (g->_left->_color == Red)
						{
								g->_color = Red;
								g->_left->_color = Black;
								p->_color = Black;
								if (g == _root)
								{
									g->_color = Black;
								}
								else
								cur = g; 
						}
						else
						{ 
							RotateL(g);
							p->_color = Black;
							p->_left->_color = Red;
							cur->_color = Black;
							if (g == _root)
							{
								_root = p;
							}
							else
							{
								cur = g;
							}
						}
					}
					else
					{
						RotateL(g);
						p->_color = Black;
						g->_color = Red;
						if (g == _root)
						{
							_root = p;
						}
						else
						{
							cur = g;
						}
					}
				}
				else//Double
				{
					if (p->_right)
					{
						if (p->_right->_color == Red)
						{
							if (g == _root)
							{

							}
							else
							{

							}
						}
						else
						{

						}
					}
					else
					{

					}
				}

			}
		}
	}
	void RotateR(Node* parent)
	{

	}
	void RotateL(Node* parent)
	{

	}
	void RoateRL(Node* parent)
	{

	}
	void RotateLR(Node* parent)
	{

	}
};
void test1()
{
	RBTree<int, int> r;
	r.insert(make_pair(3, 3));
}
int main(void)
{
	test1();
	return 0;
}
